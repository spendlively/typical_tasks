try {
    if ($this->useTransactions) {
        // MySQL's default isolation, REPEATABLE READ, causes deadlock for different sessions.
        $this->db->exec('SET TRANSACTION ISOLATION LEVEL READ COMMITTED');
        $this->db->beginTransaction();
    } else {
        $this->unlockStatements[] = $this->getLock($session_id);
    }
    $sql = "SELECT $this->col_expiry, $this->col_data
            FROM $this->table_sess WHERE $this->col_sid = :sid";
    // When using a transaction, SELECT FOR UPDATE is necessary
    // to avoid deadlock of connection that starts reading
    // before we write.
    if ($this->useTransactions) {
        $sql .= ' FOR UPDATE';
    }
    $selectStmt = $this->db->prepare($sql);
    $selectStmt->bindParam(':sid', $session_id);
    $selectStmt->execute();
    $results = $selectStmt->fetch(\PDO::FETCH_ASSOC);
    if ($results) {
        if ($results[$this->col_expiry] < time()) {
            // Return an empty string if data out of date
            return '';
        }
        return $results[$this->col_data];
    }
    // We'll get this far only if there are no results, which means
    // the session hasn't yet been registered in the database.
    if ($this->useTransactions) {
        $this->initializeRecord($selectStmt);
    }
    // Return an empty string if transactions aren't being used
    // and the session hasn't yet been registered in the database.
    return '';
} catch (\PDOException $e) {
    if ($this->db->inTransaction()) {
        $this->db->rollBack();
    }
    throw $e;
}